#ifndef BANKACCOUNTDEFINITION_BUILDER_H
#define BANKACCOUNTDEFINITION_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef BANKACCOUNTDEFINITION_READER_H
#include "bankAccountDefinition_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __Status_formal_args , Status_enum_t v0
#define __Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Status, Status_enum_t)

static const flatbuffers_voffset_t __Account_required[] = { 0 };
typedef flatbuffers_ref_t Account_ref_t;
static Account_ref_t Account_clone(flatbuffers_builder_t *B, Account_table_t t);
__flatbuffers_build_table(flatbuffers_, Account, 4)

static const flatbuffers_voffset_t __AccountInformation_required[] = { 0 };
typedef flatbuffers_ref_t AccountInformation_ref_t;
static AccountInformation_ref_t AccountInformation_clone(flatbuffers_builder_t *B, AccountInformation_table_t t);
__flatbuffers_build_table(flatbuffers_, AccountInformation, 3)

#define __Account_formal_args , int16_t v0, float v1, double v2, Status_enum_t v3
#define __Account_call_args , v0, v1, v2, v3
static inline Account_ref_t Account_create(flatbuffers_builder_t *B __Account_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Account, Account_file_identifier, Account_type_identifier)

#define __AccountInformation_formal_args , flatbuffers_string_ref_t v0, flatbuffers_bool_t v1, Account_vec_ref_t v2
#define __AccountInformation_call_args , v0, v1, v2
static inline AccountInformation_ref_t AccountInformation_create(flatbuffers_builder_t *B __AccountInformation_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, AccountInformation, AccountInformation_file_identifier, AccountInformation_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, Account_accountID, flatbuffers_int16, int16_t, 2, 2, INT16_C(0), Account)
__flatbuffers_build_scalar_field(1, flatbuffers_, Account_balance, flatbuffers_float, float, 4, 4, 0.00000000f, Account)
__flatbuffers_build_scalar_field(2, flatbuffers_, Account_interestRate, flatbuffers_double, double, 8, 8, 0.0000000000000000, Account)
__flatbuffers_build_scalar_field(3, flatbuffers_, Account_accountStatus, Status, Status_enum_t, 1, 1, INT8_C(0), Account)

static inline Account_ref_t Account_create(flatbuffers_builder_t *B __Account_formal_args)
{
    if (Account_start(B)
        || Account_interestRate_add(B, v2)
        || Account_balance_add(B, v1)
        || Account_accountID_add(B, v0)
        || Account_accountStatus_add(B, v3)) {
        return 0;
    }
    return Account_end(B);
}

static Account_ref_t Account_clone(flatbuffers_builder_t *B, Account_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Account_start(B)
        || Account_interestRate_pick(B, t)
        || Account_balance_pick(B, t)
        || Account_accountID_pick(B, t)
        || Account_accountStatus_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Account_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, AccountInformation_owner, AccountInformation)
__flatbuffers_build_scalar_field(1, flatbuffers_, AccountInformation_platinumRewards, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), AccountInformation)
__flatbuffers_build_table_vector_field(2, flatbuffers_, AccountInformation_accounts, Account, AccountInformation)

static inline AccountInformation_ref_t AccountInformation_create(flatbuffers_builder_t *B __AccountInformation_formal_args)
{
    if (AccountInformation_start(B)
        || AccountInformation_owner_add(B, v0)
        || AccountInformation_accounts_add(B, v2)
        || AccountInformation_platinumRewards_add(B, v1)) {
        return 0;
    }
    return AccountInformation_end(B);
}

static AccountInformation_ref_t AccountInformation_clone(flatbuffers_builder_t *B, AccountInformation_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (AccountInformation_start(B)
        || AccountInformation_owner_pick(B, t)
        || AccountInformation_accounts_pick(B, t)
        || AccountInformation_platinumRewards_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, AccountInformation_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* BANKACCOUNTDEFINITION_BUILDER_H */
